version: '3.8'

services:
  # Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: spoton-backend:staging
    container_name: spoton-backend-staging
    restart: unless-stopped
    depends_on:
      - postgres
      - timescale
      - redis
    environment:
      - APP_ENV=staging
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=spoton_staging
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=spoton_staging
      - TIMESCALE_HOST=timescale
      - TIMESCALE_PORT=5432
      - TIMESCALE_USER=spoton_staging
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD}
      - TIMESCALE_DB=spoton_timescale_staging
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/var/log/spoton
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # GPU-enabled Application Service
  app-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: spoton-backend:staging
    container_name: spoton-backend-staging-gpu
    restart: unless-stopped
    depends_on:
      - postgres
      - timescale
      - redis
    environment:
      - APP_ENV=staging
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=spoton_staging
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=spoton_staging
      - TIMESCALE_HOST=timescale
      - TIMESCALE_PORT=5432
      - TIMESCALE_USER=spoton_staging
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD}
      - TIMESCALE_DB=spoton_timescale_staging
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY}
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/var/log/spoton
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - gpu
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spoton-postgres-staging
    restart: unless-stopped
    environment:
      - POSTGRES_USER=spoton_staging
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=spoton_staging
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spoton_staging -d spoton_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # TimescaleDB
  timescale:
    image: timescale/timescaledb:latest-pg15
    container_name: spoton-timescale-staging
    restart: unless-stopped
    environment:
      - POSTGRES_USER=spoton_staging
      - POSTGRES_PASSWORD=${TIMESCALE_PASSWORD}
      - POSTGRES_DB=spoton_timescale_staging
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5433:5432"
    volumes:
      - timescale_staging_data:/var/lib/postgresql/data
      - ./scripts/init-timescale.sql:/docker-entrypoint-initdb.d/init-timescale.sql
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spoton_staging -d spoton_timescale_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spoton-redis-staging
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.125'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: spoton-nginx-staging
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.125'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: spoton-prometheus-staging
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=72h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.125'
          memory: 256M
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: spoton-grafana-staging
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana-staging:/etc/grafana/provisioning
    networks:
      - spoton-staging-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.125'
          memory: 128M
    profiles:
      - monitoring

networks:
  spoton-staging-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_staging_data:
    driver: local
  timescale_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local